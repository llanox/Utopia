package co.edu.udea.ludens.services.impl;


import java.util.HashMap;

import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Vector;




import org.apache.log4j.Logger;
import org.springframework.scheduling.annotation.Async;



import co.edu.udea.ludens.domain.Element;
import co.edu.udea.ludens.domain.Incrementable;
import co.edu.udea.ludens.domain.Player;
import co.edu.udea.ludens.domain.Population;
import co.edu.udea.ludens.enums.EnumElementType;
import co.edu.udea.ludens.enums.EnumEventType;
import co.edu.udea.ludens.enums.EnumMsgType;
import co.edu.udea.ludens.enums.EnumMsgs;
import co.edu.udea.ludens.services.ElementProcess;
import co.edu.udea.ludens.services.production.LevelUpgraderFactory;
import co.edu.udea.ludens.services.production.LevelUpgraderStrategy;
import co.edu.udea.ludens.services.production.ProducerFactory;
import co.edu.udea.ludens.services.production.ProducerStrategy;
import co.edu.udea.ludens.util.IncrementableEvent;
import co.edu.udea.ludens.util.IncrementableStuffListener;
import co.edu.udea.ludens.util.MessageEvent;
import co.edu.udea.ludens.util.MessageListener;
import co.edu.udea.ludens.util.ProducerUtil;
import co.edu.udea.ludens.web.ElementBean;

public class ElementProcessImpl implements ElementProcess {

	private static final String SYSTEM_ACTOR = "Sistema";
	private Player player;
	private Vector<IncrementableStuffListener> incrementListeners = new Vector<IncrementableStuffListener>();	 ;
	private Vector<MessageListener> messagesListeners  = new Vector<MessageListener>();	
	private HashMap<String,Element> mapElements = new HashMap<String,Element>();
	private static Logger logger = Logger.getLogger(ElementProcessImpl.class);

	
 	
	public ElementProcessImpl() {
		super();		
	}
	
	
	private void addElementsToMap(HashMap<String,Element> elements) {
		mapElements.putAll(elements);
	}
	
	public void initElements(){
		
		HashMap<String,Element> factors = player.getCommunity().getDevelopmentFactors();
		addElementsToMap(factors);
		
		HashMap<String,Element> materials =  player.getCommunity().getMaterials();
		addElementsToMap(materials);
		
		notifyEvent(mapElements,EnumEventType.INITIAL_SETUP);
		
	}
	

	private void notifyEvent(HashMap<String, Element> elements, EnumEventType type) {
		MessageEvent aEvent;
		
		for(Object key:elements.keySet()){
			
			Element ele= elements.get(key);
			
			aEvent = new MessageEvent(this,EnumMsgs.INITIAL_VALUE_ELEMENT,ele.getName(),ele.getInitialValue());
	    	
	    	settingSystemEvent(aEvent,ele,type);
	    	notifyMsg(aEvent);    	
		}
		
	}


	@Override
	public void produceElements() {

		ProducerStrategy producer = null;
		List<ElementBean> elementsBeans = null;		
		
		
		HashMap<String,Element> factors = player.getCommunity().getDevelopmentFactors();
		addElementsToMap(factors);
		
		HashMap<String,Element> materials =  player.getCommunity().getMaterials();
		addElementsToMap(materials);
		
		Population population =  player.getCommunity().getPopulation();
		
		
	    producer = ProducerFactory.createProducer(EnumElementType.POPULATION);
	    logger.info("population ---");
		elementsBeans = producer.produce(population,this);				
		notifyEvent(elementsBeans,EnumEventType.POPULATION_PRODUCTION);
	
		
		producer = ProducerFactory.createProducer(EnumElementType.MATERIAL);
		logger.info("materials ---");
		elementsBeans =    producer.produce(materials,this);		
		notifyEvent(elementsBeans,EnumEventType.MATERIALS_PRODUCTION);
		
			
		
		producer = ProducerFactory.createProducer(EnumElementType.FACTOR);
		logger.info("factors ---");
		elementsBeans =    producer.produce(factors,this);		
		notifyEvent(elementsBeans,EnumEventType.FACTORS_PRODUCTION);
				
		notifyMsg(EnumMsgs.PRODUCTION_PROCESS_HAPPENING);
	}
	



    private void notifyEvent(List<ElementBean> elementsBeans,EnumEventType eventType) {
    	MessageEvent aEvent;
    	
    	for(ElementBean aElement : elementsBeans){
    		
    	aEvent = new MessageEvent(this,EnumMsgs.PRODUCING_ELEMENT,aElement.getIncrementable().getName(),aElement.getIncrementable().getQuantity());
    	
    	settingSystemEvent(aEvent,aElement.getIncrementable(),eventType);
    	notifyMsg(aEvent);    	
    		
    	}
    	
    	
		IncrementableEvent event = new IncrementableEvent(this,eventType,elementsBeans);
		
		for(IncrementableStuffListener listener : incrementListeners ){
			listener.changeIncrementable(event);
		}	
	}
	


	private void settingSystemEvent(MessageEvent aEvent, Incrementable aElement,EnumEventType eventType) {
    	
		aEvent.setAffectedElement1(aElement.getName());
    	aEvent.setElement1Value(aElement.getQuantity()+"");
    	aEvent.setExecutorName(SYSTEM_ACTOR);
    	aEvent.setReceiverName(player.getUser().getLogin());
    	aEvent.setExactDate(new Date());
    	aEvent.setGameElapsedTime(ProducerUtil.getElapsedTime(player));
    	aEvent.setEventType(eventType);
    	
		
	}


	private void notifyMsg( EnumMsgs enumMsg ){
		
		MessageEvent event = new MessageEvent(this,enumMsg);		
		
		notifyMsg( event )	;
	}

    private void notifyMsg( MessageEvent event ){
			
		for(MessageListener listener : messagesListeners ){			
			listener.notifyMsg(event);
		}		
	}



	@Override
	public void addIncrementableStuffListener(	IncrementableStuffListener listener) {	
		
		incrementListeners.add(listener);	
	
	}
	
	public void addMessageListener(MessageListener listener) {			
		messagesListeners.add(listener);		
	}
	

	public void removeAllMessageListeners() {
	
		 if(messagesListeners!=null){
			 messagesListeners.clear();
		 }
		
	}
	
	
	@Override	
	public void removeAllIncrementableStuffListeners() {	
			 incrementListeners.clear();		
	}
	
	
	public void removeMessageListener(MessageListener listener) {		
			messagesListeners.remove(listener);		
	}

	@Override
	public void removeIncrementableStuffListener(IncrementableStuffListener listener) {		
			incrementListeners.remove(listener);		
	}

	@Override
	public void setPlayer(Player player) {
      this.player = player;
		
	}
	@Override
	public Player getPlayer(){
		
		return player;
	}


    @Async
	public MessageEvent upLevel(String elementName)  {
		boolean error = false;
		MessageEvent event = null;
		
		Element el = mapElements.get(elementName);
		
		logger.info("upgrading level "+elementName);
		
		try {	
			
			
			boolean producing = player.isProducing();
			
			logger.info("producing "+producing);
			
			if(producing){				
				event = new MessageEvent(this, EnumMsgs.PRODUCING_ELEMENT_ERROR,el.getName());
				
				notifyMsg(event);
				return event;				
			}
			
			
			
			logger.info("initial upgrading time "+el);
			int delay =0;
			
			if(el.getActualUpgradingTime() == null){
			
				delay = el.getInitialUpgradingTime();
			    el.setActualUpgradingTime(delay);
			}
			
			
			
			event = new MessageEvent(this, EnumMsgs.DELAY_UPGRADING_LEVEL,el.getName(),el.getActualUpgradingTime(),el.getLevel(),el.getLevel()+1);
			notifyMsg(event);
			
			LevelUpgraderStrategy upgrader = LevelUpgraderFactory.createLevelUpgrader(el);

			upgrader.upLevel(el,player);	
		
			
		} catch (Exception e) {	
					
			event = new MessageEvent(this,EnumMsgType.ERROR, e.getMessage());	
			notifyMsg(event);
			error=true;
		}
		
		if(!error){			
			Calendar cal = Calendar.getInstance();
			event = new MessageEvent(this, EnumMsgs.SUCCESSFULY_UPGRADE,el.getName(), el.getLevel());
			event.setEventType(EnumEventType.UPGRADE_LEVEL);
			event.setAffectedElement1(el.getName());
			event.setElement1Value(el.getLevel()+"");
			event.setExactDate(cal.getTime());
			event.setExecutorName(player.getUser().getLogin());
			event.setReceiverName(SYSTEM_ACTOR);
			event.setGameElapsedTime(ProducerUtil.getElapsedTime(player));
			
			notifyMsg(event);
		}
		
		return event;
		
	}
	

	@Override
	public void upLevel(Incrementable incrementable)  {		
	     upLevel(incrementable.getName());  
		
	}





}
