package co.edu.udea.ludens.services.production;

import java.util.List;

import org.apache.log4j.Logger;

import co.edu.udea.ludens.domain.Element;
import co.edu.udea.ludens.domain.LevelConstraint;
import co.edu.udea.ludens.domain.Player;
import co.edu.udea.ludens.enums.EnumMsgs;
import co.edu.udea.ludens.exceptions.LudensException;
import co.edu.udea.ludens.util.ProducerUtil;

public class FactorLevelUpgrader implements LevelUpgraderStrategy {
	public int UPGRADING_LEVEL_DURATION = 30;// seconds
	private static Logger logger = Logger.getLogger(FactorLevelUpgrader.class);	
	
	@Override
	public void upLevel(Element element, Player player) throws LudensException {
        boolean error = false;	
		Integer actualLevel = element.getLevel();		
		Integer newLevel = actualLevel + 1;
		List<LevelConstraint> ctrs = element.getLevelConstraints().get(newLevel + "");		
		// if didn't find resources constraints for this level then throw an exception
		if (ctrs == null) {	
			throw new LudensException(EnumMsgs.CANT_UP_LEVEL,element.getName(), newLevel);
		}
		
		//  we check out resources in order to know if we have enough to up the level
		ProducerUtil.checkOutResources(ctrs, element,player);

		//Here, we decrement each resource consumed to up to the next level
		for (LevelConstraint pk : ctrs) {

			Integer neededQuantity = pk.getQuantity();
			String resourceName = pk.getElementName();
			Element resource = player.getCommunity().getMaterials().get(resourceName);
			Integer quantity = resource.getQuantity() - neededQuantity;
			resource.setQuantity(quantity);
		}		

		ProducerUtil.addStartTimePlayer(player);
		
		  try {   		   
			   logger.info("Esperando "+element.getActualUpgradingTime()+" segundos para subir nivel");;
			   player.setProducing(true);
			   Thread.sleep(element.getActualUpgradingTime()*1000);
			   logger.info("Listo!! subir nivel de "+element.getName());		
		} catch (InterruptedException e) {
			logger.info("Error esperando para subir nivel", e);
			error = true;
		}
		   
	   
	       if(!error){
		   element.setLevel(newLevel);
		   ProducerUtil.updateUpgradingDelay(element);
		   player.setProducing(false);
	       }

	}

}
